{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"@nestjsx/util\");\n\nconst exceptions_1 = require(\"./exceptions\");\n\nconst types_1 = require(\"./types\");\n\nexports.deprecatedComparisonOperatorsList = ['eq', 'ne', 'gt', 'lt', 'gte', 'lte', 'starts', 'ends', 'cont', 'excl', 'in', 'notin', 'isnull', 'notnull', 'between'];\nexports.comparisonOperatorsList = [...exports.deprecatedComparisonOperatorsList, ...util_1.objKeys(types_1.CondOperator).map(n => types_1.CondOperator[n])];\nexports.sortOrdersList = ['ASC', 'DESC'];\nconst comparisonOperatorsListStr = exports.comparisonOperatorsList.join();\nconst sortOrdersListStr = exports.sortOrdersList.join();\n\nfunction validateFields(fields) {\n  if (!util_1.isArrayStrings(fields)) {\n    throw new exceptions_1.RequestQueryException('Invalid fields. Array of strings expected');\n  }\n}\n\nexports.validateFields = validateFields;\n\nfunction validateCondition(val, cond) {\n  if (!util_1.isObject(val) || !util_1.isStringFull(val.field)) {\n    throw new exceptions_1.RequestQueryException(`Invalid field type in ${cond} condition. String expected`);\n  }\n\n  validateComparisonOperator(val.operator);\n}\n\nexports.validateCondition = validateCondition;\n\nfunction validateComparisonOperator(operator) {\n  if (!exports.comparisonOperatorsList.includes(operator)) {\n    throw new exceptions_1.RequestQueryException(`Invalid comparison operator. ${comparisonOperatorsListStr} expected`);\n  }\n}\n\nexports.validateComparisonOperator = validateComparisonOperator;\n\nfunction validateJoin(join) {\n  if (!util_1.isObject(join) || !util_1.isStringFull(join.field)) {\n    throw new exceptions_1.RequestQueryException('Invalid join field. String expected');\n  }\n\n  if (!util_1.isUndefined(join.select) && !util_1.isArrayStrings(join.select)) {\n    throw new exceptions_1.RequestQueryException('Invalid join select. Array of strings expected');\n  }\n}\n\nexports.validateJoin = validateJoin;\n\nfunction validateSort(sort) {\n  if (!util_1.isObject(sort) || !util_1.isStringFull(sort.field)) {\n    throw new exceptions_1.RequestQueryException('Invalid sort field. String expected');\n  }\n\n  if (!util_1.isEqual(sort.order, exports.sortOrdersList[0]) && !util_1.isEqual(sort.order, exports.sortOrdersList[1])) {\n    throw new exceptions_1.RequestQueryException(`Invalid sort order. ${sortOrdersListStr} expected`);\n  }\n}\n\nexports.validateSort = validateSort;\n\nfunction validateNumeric(val, num) {\n  if (!util_1.isNumber(val)) {\n    throw new exceptions_1.RequestQueryException(`Invalid ${num}. Number expected`);\n  }\n}\n\nexports.validateNumeric = validateNumeric;\n\nfunction validateParamOption(options, name) {\n  if (!util_1.isObject(options)) {\n    throw new exceptions_1.RequestQueryException(`Invalid param ${name}. Invalid crud options`);\n  }\n\n  const option = options[name];\n\n  if (option && option.disabled) {\n    return;\n  }\n\n  if (!util_1.isObject(option) || util_1.isNil(option.field) || util_1.isNil(option.type)) {\n    throw new exceptions_1.RequestQueryException(`Invalid param option in Crud`);\n  }\n}\n\nexports.validateParamOption = validateParamOption;\n\nfunction validateUUID(str, name) {\n  const uuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  const uuidV4 = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n\n  if (!uuidV4.test(str) && !uuid.test(str)) {\n    throw new exceptions_1.RequestQueryException(`Invalid param ${name}. UUID string expected`);\n  }\n}\n\nexports.validateUUID = validateUUID;","map":{"version":3,"sources":["../src/request-query.validator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"@nestjsx/util\");\nconst exceptions_1 = require(\"./exceptions\");\nconst types_1 = require(\"./types\");\nexports.deprecatedComparisonOperatorsList = [\n    'eq',\n    'ne',\n    'gt',\n    'lt',\n    'gte',\n    'lte',\n    'starts',\n    'ends',\n    'cont',\n    'excl',\n    'in',\n    'notin',\n    'isnull',\n    'notnull',\n    'between',\n];\nexports.comparisonOperatorsList = [\n    ...exports.deprecatedComparisonOperatorsList,\n    ...util_1.objKeys(types_1.CondOperator).map((n) => types_1.CondOperator[n]),\n];\nexports.sortOrdersList = ['ASC', 'DESC'];\nconst comparisonOperatorsListStr = exports.comparisonOperatorsList.join();\nconst sortOrdersListStr = exports.sortOrdersList.join();\nfunction validateFields(fields) {\n    if (!util_1.isArrayStrings(fields)) {\n        throw new exceptions_1.RequestQueryException('Invalid fields. Array of strings expected');\n    }\n}\nexports.validateFields = validateFields;\nfunction validateCondition(val, cond) {\n    if (!util_1.isObject(val) || !util_1.isStringFull(val.field)) {\n        throw new exceptions_1.RequestQueryException(`Invalid field type in ${cond} condition. String expected`);\n    }\n    validateComparisonOperator(val.operator);\n}\nexports.validateCondition = validateCondition;\nfunction validateComparisonOperator(operator) {\n    if (!exports.comparisonOperatorsList.includes(operator)) {\n        throw new exceptions_1.RequestQueryException(`Invalid comparison operator. ${comparisonOperatorsListStr} expected`);\n    }\n}\nexports.validateComparisonOperator = validateComparisonOperator;\nfunction validateJoin(join) {\n    if (!util_1.isObject(join) || !util_1.isStringFull(join.field)) {\n        throw new exceptions_1.RequestQueryException('Invalid join field. String expected');\n    }\n    if (!util_1.isUndefined(join.select) && !util_1.isArrayStrings(join.select)) {\n        throw new exceptions_1.RequestQueryException('Invalid join select. Array of strings expected');\n    }\n}\nexports.validateJoin = validateJoin;\nfunction validateSort(sort) {\n    if (!util_1.isObject(sort) || !util_1.isStringFull(sort.field)) {\n        throw new exceptions_1.RequestQueryException('Invalid sort field. String expected');\n    }\n    if (!util_1.isEqual(sort.order, exports.sortOrdersList[0]) &&\n        !util_1.isEqual(sort.order, exports.sortOrdersList[1])) {\n        throw new exceptions_1.RequestQueryException(`Invalid sort order. ${sortOrdersListStr} expected`);\n    }\n}\nexports.validateSort = validateSort;\nfunction validateNumeric(val, num) {\n    if (!util_1.isNumber(val)) {\n        throw new exceptions_1.RequestQueryException(`Invalid ${num}. Number expected`);\n    }\n}\nexports.validateNumeric = validateNumeric;\nfunction validateParamOption(options, name) {\n    if (!util_1.isObject(options)) {\n        throw new exceptions_1.RequestQueryException(`Invalid param ${name}. Invalid crud options`);\n    }\n    const option = options[name];\n    if (option && option.disabled) {\n        return;\n    }\n    if (!util_1.isObject(option) || util_1.isNil(option.field) || util_1.isNil(option.type)) {\n        throw new exceptions_1.RequestQueryException(`Invalid param option in Crud`);\n    }\n}\nexports.validateParamOption = validateParamOption;\nfunction validateUUID(str, name) {\n    const uuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    const uuidV4 = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    if (!uuidV4.test(str) && !uuid.test(str)) {\n        throw new exceptions_1.RequestQueryException(`Invalid param ${name}. UUID string expected`);\n    }\n}\nexports.validateUUID = validateUUID;\n//# sourceMappingURL=request-query.validator.js.map"]},"metadata":{},"sourceType":"script"}