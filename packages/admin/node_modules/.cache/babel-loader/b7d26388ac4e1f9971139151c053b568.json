{"ast":null,"code":"import { fetchUtils } from 'react-admin';\nimport { axiosInstance } from 'services/http';\nimport { CondOperator, RequestQueryBuilder } from '@nestjsx/crud-request'; // TODO This is a uuid hack to filter works based on a uuid\n\nimport { validate as uuidValidate } from 'uuid';\nconst httpClient = fetchUtils.fetchJson;\n\nconst getMessage = error => {\n  return \"random message\";\n  const message = error.response && error.response.data && error.response.data.message;\n\n  if (!message) {\n    return error.response.statusText;\n  }\n\n  return typeof message !== 'string' ? error.response.data.message[0] : error.response.data.message;\n};\n\nconst composeFilter = paramsFilter => {\n  if (paramsFilter && (paramsFilter === '' || typeof paramsFilter.q !== 'undefined' && paramsFilter.q === '')) {\n    paramsFilter = {};\n  }\n\n  const flatFilter = fetchUtils.flattenObject(paramsFilter);\n  return Object.keys(flatFilter).map(key => {\n    const splitKey = key.split('||');\n    let field = splitKey[0];\n    let ops = splitKey[1];\n\n    if (!ops) {\n      if (typeof flatFilter[key] === 'number' || typeof flatFilter[key] === 'boolean' || flatFilter[key].match && flatFilter[key].match(/^\\d+$/) || uuidValidate(flatFilter[key])) {\n        ops = CondOperator.EQUALS;\n      } else {\n        ops = CondOperator.CONTAINS;\n      }\n    }\n\n    if (field.startsWith('_') && field.includes('.')) {\n      field = field.split(/\\.(.+)/)[1];\n    }\n\n    return {\n      field,\n      operator: ops,\n      value: flatFilter[key]\n    };\n  });\n};\n\nconst USER_MOCK = [{\n  \"id\": 1,\n  \"email\": \"User 1\",\n  \"username\": \"User 1\",\n  \"firstName\": \"User 1\",\n  \"lastName\": \"User 1\"\n}, {\n  \"id\": 2,\n  \"email\": \"User 2\",\n  \"username\": \"User 2\",\n  \"firstName\": \"User 2\",\n  \"lastName\": \"User 2\"\n}];\nexport const dataProvider = {\n  getList: () => //  resource, params\n  new Promise(() => //  resolve, reject\n  {\n    console.log();\n    return new Promise(resolve => resolve({\n      data: USER_MOCK,\n      total: 2\n    })); // const newResource = resource === 'users' ? 'user' : resource;\n    // const { page, perPage } = params.pagination;\n    // const query = RequestQueryBuilder.create({\n    //   filter: composeFilter(params.filter),\n    // })\n    //   .setLimit(perPage)\n    //   .setPage(page)\n    //   .sortBy(params.sort as QuerySort)\n    //   .setOffset((page - 1) * perPage)\n    //   .query();\n    // const url = `${newResource}?${query}`;\n    // return axiosInstance\n    //   .get(url)\n    //   .then(response =>\n    //     resolve({\n    //       data: response.data.data,\n    //       total: response.data.total,\n    //     }),\n    //   )\n    //   .catch(error => {\n    //     const message = getMessage(error);\n    //     error.message = message;\n    //     return reject(error);\n    //   });\n  }),\n  getOne: (resource, params) => axiosInstance.get(`/${resource}/${params.id}`).then(response => ({\n    data: response.data\n  })),\n  getMany: () => //  resource, params\n  new Promise(() => //  resolve, reject\n  {\n    return new Promise(resolve => resolve({\n      data: USER_MOCK,\n      total: 1\n    }));\n  }),\n  // new Promise((resolve, reject) => {\n  //   const query = RequestQueryBuilder.create()\n  //     .setFilter({\n  //       field: 'id',\n  //       operator: CondOperator.IN,\n  //       value: `${params.ids}`,\n  //     })\n  //     .query();\n  //   const url = `${resource}?${query}`;\n  //   return axiosInstance\n  //     .get(url)\n  //     .then(response =>\n  //       resolve({\n  //         data: response.data.data,\n  //       }),\n  //     )\n  //     .catch(error => {\n  //       const message = getMessage(error);\n  //       error.message = message;\n  //       return reject(error);\n  //     });\n  // }),\n  getManyReference: (resource, params) => new Promise((resolve, reject) => {\n    const {\n      page,\n      perPage\n    } = params.pagination;\n    const filter = composeFilter({});\n\n    if (params.id && params.target) {\n      filter.push({\n        field: params.target,\n        operator: CondOperator.EQUALS,\n        value: params.id\n      });\n    }\n\n    const query = RequestQueryBuilder.create({\n      filter\n    }).sortBy(params.sort).setLimit(perPage).setOffset((page - 1) * perPage).query();\n    const url = `${resource}?${query}`;\n    return axiosInstance.get(url).then(({\n      data\n    }) => resolve({\n      data: data.data,\n      total: data.total\n    })).catch(error => {\n      const message = getMessage(error);\n      error.message = message;\n      return reject(error);\n    });\n  }),\n  update: (resource, params) => new Promise((resolve, reject) => axiosInstance.patch(`${resource}/${params.id}`, params.data).then(response => resolve({\n    data: response.data\n  })).catch(error => {\n    const message = getMessage(error);\n    error.message = message;\n    return reject(error);\n  })),\n  updateMany: (resource, params) => {\n    return httpClient(`${resource}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data)\n    }).then(({\n      json\n    }) => ({\n      data: json\n    }));\n  },\n  create: (resource, params) => new Promise((resolve, reject) => axiosInstance.post(`${resource}`, params.data).then(response => resolve({\n    data: response.data\n  })).catch(error => {\n    const message = getMessage(error);\n    error.message = message;\n    return reject(error);\n  })),\n  delete: (resource, params) => new Promise((resolve, reject) => axiosInstance.delete(`${resource}/${params.id}`).then(({\n    data\n  }) => resolve({\n    data\n  })).catch(error => {\n    const message = getMessage(error);\n    error.message = message;\n    return reject(error);\n  })),\n  deleteMany: (resource, params) => {\n    return new Promise((resolve, reject) => {\n      return Promise.all(params.ids.map(id => axiosInstance.delete(`${resource}/${id}`))).then(responses => resolve({\n        data: responses.map(response => response.data)\n      })).catch(error => {\n        const message = getMessage(error);\n        error.message = message;\n        return reject(error);\n      });\n    });\n  }\n};\nexport default dataProvider;","map":{"version":3,"sources":["/Users/thiagoramalho/Documents/Thiago/Workspace/Firestorm/ap-admin/packages/admin/src/providers/dataProvider.ts"],"names":["fetchUtils","axiosInstance","CondOperator","RequestQueryBuilder","validate","uuidValidate","httpClient","fetchJson","getMessage","error","message","response","data","statusText","composeFilter","paramsFilter","q","flatFilter","flattenObject","Object","keys","map","key","splitKey","split","field","ops","match","EQUALS","CONTAINS","startsWith","includes","operator","value","USER_MOCK","dataProvider","getList","Promise","console","log","resolve","total","getOne","resource","params","get","id","then","getMany","getManyReference","reject","page","perPage","pagination","filter","target","push","query","create","sortBy","sort","setLimit","setOffset","url","catch","update","patch","updateMany","method","body","JSON","stringify","json","post","delete","deleteMany","all","ids","responses"],"mappings":"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","sourcesContent":["import { fetchUtils, DataProvider } from 'react-admin';\nimport { axiosInstance } from 'services/http';\nimport {\n  CondOperator,\n  QueryFilter,\n  QuerySort,\n  RequestQueryBuilder,\n} from '@nestjsx/crud-request';\n// TODO This is a uuid hack to filter works based on a uuid\nimport { validate as uuidValidate } from 'uuid';\n\nconst httpClient = fetchUtils.fetchJson;\n\nconst getMessage = (error: any) => {\n  return \"random message\";\n\n\n  const message =\n    error.response && error.response.data && error.response.data.message;\n  if (!message) {\n    return error.response.statusText;\n  }\n  return typeof message !== 'string'\n    ? error.response.data.message[0]\n    : error.response.data.message;\n};\nconst composeFilter = (paramsFilter: any): QueryFilter[] => {\n  if (\n    paramsFilter &&\n    (paramsFilter === '' ||\n      (typeof paramsFilter.q !== 'undefined' && paramsFilter.q === ''))\n  ) {\n    paramsFilter = {};\n  }\n\n  const flatFilter = fetchUtils.flattenObject(paramsFilter);\n  return Object.keys(flatFilter).map(key => {\n    const splitKey = key.split('||');\n\n    let field = splitKey[0];\n    let ops = splitKey[1];\n    if (!ops) {\n      if (\n        typeof flatFilter[key] === 'number' ||\n        typeof flatFilter[key] === 'boolean' ||\n        (flatFilter[key].match && flatFilter[key].match(/^\\d+$/)) ||\n        uuidValidate(flatFilter[key])\n      ) {\n        ops = CondOperator.EQUALS;\n      } else {\n        ops = CondOperator.CONTAINS;\n      }\n    }\n\n    if (field.startsWith('_') && field.includes('.')) {\n      field = field.split(/\\.(.+)/)[1];\n    }\n    return { field, operator: ops, value: flatFilter[key] } as QueryFilter;\n  });\n};\n\nconst USER_MOCK = [{\n  \"id\": 1,\n  \"email\": \"User 1\",\n  \"username\": \"User 1\",\n  \"firstName\": \"User 1\",\n  \"lastName\": \"User 1\",\n  \n},{\n  \"id\": 2,\n  \"email\": \"User 2\",\n  \"username\": \"User 2\",\n  \"firstName\": \"User 2\",\n  \"lastName\": \"User 2\",\n  \n}];\n\nexport const dataProvider: DataProvider = {\n  getList: (\n  //  resource, params\n  ) =>\n    new Promise((\n    //  resolve, reject\n    ) => {\n      console.log()\n      return new Promise((resolve) =>\n        resolve({\n          data: USER_MOCK,\n          total: 2\n        })\n      )\n    \n\n      // const newResource = resource === 'users' ? 'user' : resource;\n      // const { page, perPage } = params.pagination;\n      // const query = RequestQueryBuilder.create({\n      //   filter: composeFilter(params.filter),\n      // })\n      //   .setLimit(perPage)\n      //   .setPage(page)\n      //   .sortBy(params.sort as QuerySort)\n      //   .setOffset((page - 1) * perPage)\n      //   .query();\n      // const url = `${newResource}?${query}`;\n      // return axiosInstance\n      //   .get(url)\n      //   .then(response =>\n      //     resolve({\n      //       data: response.data.data,\n      //       total: response.data.total,\n      //     }),\n      //   )\n      //   .catch(error => {\n      //     const message = getMessage(error);\n\n      //     error.message = message;\n      //     return reject(error);\n      //   });\n  }),\n  getOne: (resource, params) =>\n    axiosInstance.get(`/${resource}/${params.id}`).then(response => ({\n      data: response.data,\n    })),\n  getMany: (\n  //  resource, params\n  ) =>\n    new Promise((\n    //  resolve, reject\n    ) => {\n      return new Promise((resolve) =>\n        resolve({\n          data: USER_MOCK,\n          total: 1\n        })\n      )\n    }),\n    // new Promise((resolve, reject) => {\n    //   const query = RequestQueryBuilder.create()\n    //     .setFilter({\n    //       field: 'id',\n    //       operator: CondOperator.IN,\n    //       value: `${params.ids}`,\n    //     })\n    //     .query();\n    //   const url = `${resource}?${query}`;\n\n    //   return axiosInstance\n    //     .get(url)\n    //     .then(response =>\n    //       resolve({\n    //         data: response.data.data,\n    //       }),\n    //     )\n    //     .catch(error => {\n    //       const message = getMessage(error);\n\n    //       error.message = message;\n    //       return reject(error);\n    //     });\n    // }),\n  getManyReference: (resource, params) =>\n    new Promise((resolve, reject) => {\n      const { page, perPage } = params.pagination;\n      const filter: QueryFilter[] = composeFilter({});\n      if (params.id && params.target) {\n        filter.push({\n          field: params.target,\n          operator: CondOperator.EQUALS,\n          value: params.id,\n        });\n      }\n\n      const query = RequestQueryBuilder.create({\n        filter,\n      })\n        .sortBy(params.sort as QuerySort)\n        .setLimit(perPage)\n        .setOffset((page - 1) * perPage)\n        .query();\n\n      const url = `${resource}?${query}`;\n      return axiosInstance\n        .get(url)\n        .then(({ data }) =>\n          resolve({\n            data: data.data,\n            total: data.total,\n          }),\n        )\n        .catch(error => {\n          const message = getMessage(error);\n\n          error.message = message;\n          return reject(error);\n        });\n    }),\n  update: (resource, params) =>\n    new Promise((resolve, reject) =>\n      axiosInstance\n        .patch(`${resource}/${params.id}`, params.data)\n        .then(response =>\n          resolve({\n            data: response.data,\n          }),\n        )\n        .catch(error => {\n          const message = getMessage(error);\n\n          error.message = message;\n          return reject(error);\n        }),\n    ),\n  updateMany: (resource, params) => {\n    return httpClient(`${resource}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({ data: json }));\n  },\n  create: (resource, params) =>\n    new Promise((resolve, reject) =>\n      axiosInstance\n        .post(`${resource}`, params.data)\n        .then(response =>\n          resolve({\n            data: response.data,\n          }),\n        )\n        .catch(error => {\n          const message = getMessage(error);\n\n          error.message = message;\n          return reject(error);\n        }),\n    ),\n  delete: (resource, params) =>\n    new Promise((resolve, reject) =>\n      axiosInstance\n        .delete(`${resource}/${params.id}`)\n        .then(({ data }) => resolve({ data }))\n        .catch(error => {\n          const message = getMessage(error);\n\n          error.message = message;\n          return reject(error);\n        }),\n    ),\n  deleteMany: (resource, params) => {\n    return new Promise((resolve, reject) => {\n      return Promise.all(\n        params.ids.map(id => axiosInstance.delete(`${resource}/${id}`)),\n      )\n        .then(responses =>\n          resolve({ data: responses.map(response => response.data) }),\n        )\n        .catch(error => {\n          const message = getMessage(error);\n\n          error.message = message;\n          return reject(error);\n        });\n    });\n  },\n};\n\nexport default dataProvider;\n"]},"metadata":{},"sourceType":"module"}