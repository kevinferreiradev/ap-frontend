{"ast":null,"code":"import { fetchUtils } from 'react-admin';\nimport { axiosInstance } from 'services/http';\nimport { CondOperator, RequestQueryBuilder } from '@nestjsx/crud-request'; // TODO This is a uuid hack to filter works based on a uuid\n\nimport { validate as uuidValidate } from 'uuid';\nconst httpClient = fetchUtils.fetchJson;\n\nconst getMessage = error => {\n  return \"random message\";\n  const message = error.response && error.response.data && error.response.data.message;\n\n  if (!message) {\n    return error.response.statusText;\n  }\n\n  return typeof message !== 'string' ? error.response.data.message[0] : error.response.data.message;\n};\n\nconst composeFilter = paramsFilter => {\n  if (paramsFilter && (paramsFilter === '' || typeof paramsFilter.q !== 'undefined' && paramsFilter.q === '')) {\n    paramsFilter = {};\n  }\n\n  const flatFilter = fetchUtils.flattenObject(paramsFilter);\n  return Object.keys(flatFilter).map(key => {\n    const splitKey = key.split('||');\n    let field = splitKey[0];\n    let ops = splitKey[1];\n\n    if (!ops) {\n      if (typeof flatFilter[key] === 'number' || typeof flatFilter[key] === 'boolean' || flatFilter[key].match && flatFilter[key].match(/^\\d+$/) || uuidValidate(flatFilter[key])) {\n        ops = CondOperator.EQUALS;\n      } else {\n        ops = CondOperator.CONTAINS;\n      }\n    }\n\n    if (field.startsWith('_') && field.includes('.')) {\n      field = field.split(/\\.(.+)/)[1];\n    }\n\n    return {\n      field,\n      operator: ops,\n      value: flatFilter[key]\n    };\n  });\n};\n\nconst USER_MOCK = [{\n  \"id\": 1,\n  \"username\": \"User 1\",\n  \"firstName\": \"User 1\",\n  \"lastName\": \"User 1\"\n}, {\n  \"id\": 2,\n  \"username\": \"User 2\",\n  \"firstName\": \"User 2\",\n  \"lastName\": \"User 2\"\n}];\nexport const dataProvider = {\n  getList: (resource, params) => new Promise((resolve, reject) => {\n    return new Promise(resolve => resolve({\n      data: USER_MOCK,\n      total: 1\n    })); // const newResource = resource === 'users' ? 'user' : resource;\n    // const { page, perPage } = params.pagination;\n    // const query = RequestQueryBuilder.create({\n    //   filter: composeFilter(params.filter),\n    // })\n    //   .setLimit(perPage)\n    //   .setPage(page)\n    //   .sortBy(params.sort as QuerySort)\n    //   .setOffset((page - 1) * perPage)\n    //   .query();\n    // const url = `${newResource}?${query}`;\n    // return axiosInstance\n    //   .get(url)\n    //   .then(response =>\n    //     resolve({\n    //       data: response.data.data,\n    //       total: response.data.total,\n    //     }),\n    //   )\n    //   .catch(error => {\n    //     const message = getMessage(error);\n    //     error.message = message;\n    //     return reject(error);\n    //   });\n  }),\n  getOne: (resource, params) => axiosInstance.get(`/${resource}/${params.id}`).then(response => ({\n    data: response.data\n  })),\n  getMany: (resource, params) => new Promise((resolve, reject) => {\n    const query = RequestQueryBuilder.create().setFilter({\n      field: 'id',\n      operator: CondOperator.IN,\n      value: `${params.ids}`\n    }).query();\n    const url = `${resource}?${query}`;\n    return axiosInstance.get(url).then(response => resolve({\n      data: response.data.data\n    })).catch(error => {\n      const message = getMessage(error);\n      error.message = message;\n      return reject(error);\n    });\n  }),\n  getManyReference: (resource, params) => new Promise((resolve, reject) => {\n    const {\n      page,\n      perPage\n    } = params.pagination;\n    const filter = composeFilter({});\n\n    if (params.id && params.target) {\n      filter.push({\n        field: params.target,\n        operator: CondOperator.EQUALS,\n        value: params.id\n      });\n    }\n\n    const query = RequestQueryBuilder.create({\n      filter\n    }).sortBy(params.sort).setLimit(perPage).setOffset((page - 1) * perPage).query();\n    const url = `${resource}?${query}`;\n    return axiosInstance.get(url).then(({\n      data\n    }) => resolve({\n      data: data.data,\n      total: data.total\n    })).catch(error => {\n      const message = getMessage(error);\n      error.message = message;\n      return reject(error);\n    });\n  }),\n  update: (resource, params) => new Promise((resolve, reject) => axiosInstance.patch(`${resource}/${params.id}`, params.data).then(response => resolve({\n    data: response.data\n  })).catch(error => {\n    const message = getMessage(error);\n    error.message = message;\n    return reject(error);\n  })),\n  updateMany: (resource, params) => {\n    return httpClient(`${resource}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data)\n    }).then(({\n      json\n    }) => ({\n      data: json\n    }));\n  },\n  create: (resource, params) => new Promise((resolve, reject) => axiosInstance.post(`${resource}`, params.data).then(response => resolve({\n    data: response.data\n  })).catch(error => {\n    const message = getMessage(error);\n    error.message = message;\n    return reject(error);\n  })),\n  delete: (resource, params) => new Promise((resolve, reject) => axiosInstance.delete(`${resource}/${params.id}`).then(({\n    data\n  }) => resolve({\n    data\n  })).catch(error => {\n    const message = getMessage(error);\n    error.message = message;\n    return reject(error);\n  })),\n  deleteMany: (resource, params) => {\n    return new Promise((resolve, reject) => {\n      return Promise.all(params.ids.map(id => axiosInstance.delete(`${resource}/${id}`))).then(responses => resolve({\n        data: responses.map(response => response.data)\n      })).catch(error => {\n        const message = getMessage(error);\n        error.message = message;\n        return reject(error);\n      });\n    });\n  }\n};\nexport default dataProvider;","map":{"version":3,"sources":["/Users/thiagoramalho/Documents/Thiago/Workspace/Firestorm/ap-admin/packages/admin/src/providers/dataProvider.ts"],"names":["fetchUtils","axiosInstance","CondOperator","RequestQueryBuilder","validate","uuidValidate","httpClient","fetchJson","getMessage","error","message","response","data","statusText","composeFilter","paramsFilter","q","flatFilter","flattenObject","Object","keys","map","key","splitKey","split","field","ops","match","EQUALS","CONTAINS","startsWith","includes","operator","value","USER_MOCK","dataProvider","getList","resource","params","Promise","resolve","reject","total","getOne","get","id","then","getMany","query","create","setFilter","IN","ids","url","catch","getManyReference","page","perPage","pagination","filter","target","push","sortBy","sort","setLimit","setOffset","update","patch","updateMany","method","body","JSON","stringify","json","post","delete","deleteMany","all","responses"],"mappings":"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","sourcesContent":["import { fetchUtils, DataProvider } from 'react-admin';\nimport { axiosInstance } from 'services/http';\nimport {\n  CondOperator,\n  QueryFilter,\n  QuerySort,\n  RequestQueryBuilder,\n} from '@nestjsx/crud-request';\n// TODO This is a uuid hack to filter works based on a uuid\nimport { validate as uuidValidate } from 'uuid';\n\nconst httpClient = fetchUtils.fetchJson;\n\nconst getMessage = (error: any) => {\n  return \"random message\";\n\n\n  const message =\n    error.response && error.response.data && error.response.data.message;\n  if (!message) {\n    return error.response.statusText;\n  }\n  return typeof message !== 'string'\n    ? error.response.data.message[0]\n    : error.response.data.message;\n};\nconst composeFilter = (paramsFilter: any): QueryFilter[] => {\n  if (\n    paramsFilter &&\n    (paramsFilter === '' ||\n      (typeof paramsFilter.q !== 'undefined' && paramsFilter.q === ''))\n  ) {\n    paramsFilter = {};\n  }\n\n  const flatFilter = fetchUtils.flattenObject(paramsFilter);\n  return Object.keys(flatFilter).map(key => {\n    const splitKey = key.split('||');\n\n    let field = splitKey[0];\n    let ops = splitKey[1];\n    if (!ops) {\n      if (\n        typeof flatFilter[key] === 'number' ||\n        typeof flatFilter[key] === 'boolean' ||\n        (flatFilter[key].match && flatFilter[key].match(/^\\d+$/)) ||\n        uuidValidate(flatFilter[key])\n      ) {\n        ops = CondOperator.EQUALS;\n      } else {\n        ops = CondOperator.CONTAINS;\n      }\n    }\n\n    if (field.startsWith('_') && field.includes('.')) {\n      field = field.split(/\\.(.+)/)[1];\n    }\n    return { field, operator: ops, value: flatFilter[key] } as QueryFilter;\n  });\n};\n\nconst USER_MOCK = [{\n  \"id\":1,\n  \"username\": \"User 1\",\n  \"firstName\": \"User 1\",\n  \"lastName\": \"User 1\",\n  \n},{\n  \"id\":2,\n  \"username\": \"User 2\",\n  \"firstName\": \"User 2\",\n  \"lastName\": \"User 2\",\n  \n}];\n\nexport const dataProvider: DataProvider = {\n  getList: (resource, params) =>\n    new Promise((resolve, reject) => {\n      return new Promise((resolve) =>\n        resolve({\n          data: USER_MOCK,\n          total: 1\n        })\n      )\n    \n\n      // const newResource = resource === 'users' ? 'user' : resource;\n      // const { page, perPage } = params.pagination;\n      // const query = RequestQueryBuilder.create({\n      //   filter: composeFilter(params.filter),\n      // })\n      //   .setLimit(perPage)\n      //   .setPage(page)\n      //   .sortBy(params.sort as QuerySort)\n      //   .setOffset((page - 1) * perPage)\n      //   .query();\n      // const url = `${newResource}?${query}`;\n      // return axiosInstance\n      //   .get(url)\n      //   .then(response =>\n      //     resolve({\n      //       data: response.data.data,\n      //       total: response.data.total,\n      //     }),\n      //   )\n      //   .catch(error => {\n      //     const message = getMessage(error);\n\n      //     error.message = message;\n      //     return reject(error);\n      //   });\n  }),\n  getOne: (resource, params) =>\n    axiosInstance.get(`/${resource}/${params.id}`).then(response => ({\n      data: response.data,\n    })),\n  getMany: (resource, params) =>\n    new Promise((resolve, reject) => {\n      const query = RequestQueryBuilder.create()\n        .setFilter({\n          field: 'id',\n          operator: CondOperator.IN,\n          value: `${params.ids}`,\n        })\n        .query();\n      const url = `${resource}?${query}`;\n\n      return axiosInstance\n        .get(url)\n        .then(response =>\n          resolve({\n            data: response.data.data,\n          }),\n        )\n        .catch(error => {\n          const message = getMessage(error);\n\n          error.message = message;\n          return reject(error);\n        });\n    }),\n  getManyReference: (resource, params) =>\n    new Promise((resolve, reject) => {\n      const { page, perPage } = params.pagination;\n      const filter: QueryFilter[] = composeFilter({});\n      if (params.id && params.target) {\n        filter.push({\n          field: params.target,\n          operator: CondOperator.EQUALS,\n          value: params.id,\n        });\n      }\n\n      const query = RequestQueryBuilder.create({\n        filter,\n      })\n        .sortBy(params.sort as QuerySort)\n        .setLimit(perPage)\n        .setOffset((page - 1) * perPage)\n        .query();\n\n      const url = `${resource}?${query}`;\n      return axiosInstance\n        .get(url)\n        .then(({ data }) =>\n          resolve({\n            data: data.data,\n            total: data.total,\n          }),\n        )\n        .catch(error => {\n          const message = getMessage(error);\n\n          error.message = message;\n          return reject(error);\n        });\n    }),\n  update: (resource, params) =>\n    new Promise((resolve, reject) =>\n      axiosInstance\n        .patch(`${resource}/${params.id}`, params.data)\n        .then(response =>\n          resolve({\n            data: response.data,\n          }),\n        )\n        .catch(error => {\n          const message = getMessage(error);\n\n          error.message = message;\n          return reject(error);\n        }),\n    ),\n  updateMany: (resource, params) => {\n    return httpClient(`${resource}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({ data: json }));\n  },\n  create: (resource, params) =>\n    new Promise((resolve, reject) =>\n      axiosInstance\n        .post(`${resource}`, params.data)\n        .then(response =>\n          resolve({\n            data: response.data,\n          }),\n        )\n        .catch(error => {\n          const message = getMessage(error);\n\n          error.message = message;\n          return reject(error);\n        }),\n    ),\n  delete: (resource, params) =>\n    new Promise((resolve, reject) =>\n      axiosInstance\n        .delete(`${resource}/${params.id}`)\n        .then(({ data }) => resolve({ data }))\n        .catch(error => {\n          const message = getMessage(error);\n\n          error.message = message;\n          return reject(error);\n        }),\n    ),\n  deleteMany: (resource, params) => {\n    return new Promise((resolve, reject) => {\n      return Promise.all(\n        params.ids.map(id => axiosInstance.delete(`${resource}/${id}`)),\n      )\n        .then(responses =>\n          resolve({ data: responses.map(response => response.data) }),\n        )\n        .catch(error => {\n          const message = getMessage(error);\n\n          error.message = message;\n          return reject(error);\n        });\n    });\n  },\n};\n\nexport default dataProvider;\n"]},"metadata":{},"sourceType":"module"}