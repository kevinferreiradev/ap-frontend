{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"@nestjsx/util\");\n\nconst qs_1 = require(\"qs\");\n\nconst request_query_validator_1 = require(\"./request-query.validator\");\n\nclass RequestQueryBuilder {\n  constructor() {\n    this.paramNames = {};\n    this.queryObject = {};\n    this.setParamNames();\n  }\n\n  static setOptions(options) {\n    RequestQueryBuilder._options = { ...RequestQueryBuilder._options,\n      ...options,\n      paramNamesMap: { ...RequestQueryBuilder._options.paramNamesMap,\n        ...(options.paramNamesMap ? options.paramNamesMap : {})\n      }\n    };\n  }\n\n  static getOptions() {\n    return RequestQueryBuilder._options;\n  }\n\n  static create(params) {\n    const qb = new RequestQueryBuilder();\n    return util_1.isObject(params) ? qb.createFromParams(params) : qb;\n  }\n\n  get options() {\n    return RequestQueryBuilder._options;\n  }\n\n  setParamNames() {\n    Object.keys(RequestQueryBuilder._options.paramNamesMap).forEach(key => {\n      const name = RequestQueryBuilder._options.paramNamesMap[key];\n      this.paramNames[key] = util_1.isString(name) ? name : name[0];\n    });\n  }\n\n  query(encode = true) {\n    if (this.queryObject[this.paramNames.search]) {\n      this.queryObject[this.paramNames.filter] = undefined;\n      this.queryObject[this.paramNames.or] = undefined;\n    }\n\n    this.queryString = qs_1.stringify(this.queryObject, {\n      encode\n    });\n    return this.queryString;\n  }\n\n  select(fields) {\n    if (util_1.isArrayFull(fields)) {\n      request_query_validator_1.validateFields(fields);\n      this.queryObject[this.paramNames.fields] = fields.join(this.options.delimStr);\n    }\n\n    return this;\n  }\n\n  search(s) {\n    if (!util_1.isNil(s) && util_1.isObject(s)) {\n      this.queryObject[this.paramNames.search] = JSON.stringify(s);\n    }\n\n    return this;\n  }\n\n  setFilter(f) {\n    this.setCondition(f, 'filter');\n    return this;\n  }\n\n  setOr(f) {\n    this.setCondition(f, 'or');\n    return this;\n  }\n\n  setJoin(j) {\n    if (!util_1.isNil(j)) {\n      const param = this.checkQueryObjectParam('join', []);\n      this.queryObject[param] = [...this.queryObject[param], ...(Array.isArray(j) && !util_1.isString(j[0]) ? j.map(o => this.addJoin(o)) : [this.addJoin(j)])];\n    }\n\n    return this;\n  }\n\n  sortBy(s) {\n    if (!util_1.isNil(s)) {\n      const param = this.checkQueryObjectParam('sort', []);\n      this.queryObject[param] = [...this.queryObject[param], ...(Array.isArray(s) && !util_1.isString(s[0]) ? s.map(o => this.addSortBy(o)) : [this.addSortBy(s)])];\n    }\n\n    return this;\n  }\n\n  setLimit(n) {\n    this.setNumeric(n, 'limit');\n    return this;\n  }\n\n  setOffset(n) {\n    this.setNumeric(n, 'offset');\n    return this;\n  }\n\n  setPage(n) {\n    this.setNumeric(n, 'page');\n    return this;\n  }\n\n  resetCache() {\n    this.setNumeric(0, 'cache');\n    return this;\n  }\n\n  cond(f, cond = 'search') {\n    const filter = Array.isArray(f) ? {\n      field: f[0],\n      operator: f[1],\n      value: f[2]\n    } : f;\n    request_query_validator_1.validateCondition(filter, cond);\n    const d = this.options.delim;\n    return filter.field + d + filter.operator + (util_1.hasValue(filter.value) ? d + filter.value : '');\n  }\n\n  addJoin(j) {\n    const join = Array.isArray(j) ? {\n      field: j[0],\n      select: j[1]\n    } : j;\n    request_query_validator_1.validateJoin(join);\n    const d = this.options.delim;\n    const ds = this.options.delimStr;\n    return join.field + (util_1.isArrayFull(join.select) ? d + join.select.join(ds) : '');\n  }\n\n  addSortBy(s) {\n    const sort = Array.isArray(s) ? {\n      field: s[0],\n      order: s[1]\n    } : s;\n    request_query_validator_1.validateSort(sort);\n    const ds = this.options.delimStr;\n    return sort.field + ds + sort.order;\n  }\n\n  createFromParams(params) {\n    this.select(params.fields);\n    this.search(params.search);\n    this.setFilter(params.filter);\n    this.setOr(params.or);\n    this.setJoin(params.join);\n    this.setLimit(params.limit);\n    this.setOffset(params.offset);\n    this.setPage(params.page);\n    this.sortBy(params.sort);\n\n    if (params.resetCache) {\n      this.resetCache();\n    }\n\n    return this;\n  }\n\n  checkQueryObjectParam(cond, defaults) {\n    const param = this.paramNames[cond];\n\n    if (util_1.isNil(this.queryObject[param]) && !util_1.isUndefined(defaults)) {\n      this.queryObject[param] = defaults;\n    }\n\n    return param;\n  }\n\n  setCondition(f, cond) {\n    if (!util_1.isNil(f)) {\n      const param = this.checkQueryObjectParam(cond, []);\n      this.queryObject[param] = [...this.queryObject[param], ...(Array.isArray(f) && !util_1.isString(f[0]) ? f.map(o => this.cond(o, cond)) : [this.cond(f, cond)])];\n    }\n  }\n\n  setNumeric(n, cond) {\n    if (!util_1.isNil(n)) {\n      request_query_validator_1.validateNumeric(n, cond);\n      this.queryObject[this.paramNames[cond]] = n;\n    }\n  }\n\n}\n\nexports.RequestQueryBuilder = RequestQueryBuilder;\nRequestQueryBuilder._options = {\n  delim: '||',\n  delimStr: ',',\n  paramNamesMap: {\n    fields: ['fields', 'select'],\n    search: 's',\n    filter: 'filter',\n    or: 'or',\n    join: 'join',\n    sort: 'sort',\n    limit: ['limit', 'per_page'],\n    offset: 'offset',\n    page: 'page',\n    cache: 'cache'\n  }\n};","map":{"version":3,"sources":["../src/request-query.builder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"@nestjsx/util\");\nconst qs_1 = require(\"qs\");\nconst request_query_validator_1 = require(\"./request-query.validator\");\nclass RequestQueryBuilder {\n    constructor() {\n        this.paramNames = {};\n        this.queryObject = {};\n        this.setParamNames();\n    }\n    static setOptions(options) {\n        RequestQueryBuilder._options = {\n            ...RequestQueryBuilder._options,\n            ...options,\n            paramNamesMap: {\n                ...RequestQueryBuilder._options.paramNamesMap,\n                ...(options.paramNamesMap ? options.paramNamesMap : {}),\n            },\n        };\n    }\n    static getOptions() {\n        return RequestQueryBuilder._options;\n    }\n    static create(params) {\n        const qb = new RequestQueryBuilder();\n        return util_1.isObject(params) ? qb.createFromParams(params) : qb;\n    }\n    get options() {\n        return RequestQueryBuilder._options;\n    }\n    setParamNames() {\n        Object.keys(RequestQueryBuilder._options.paramNamesMap).forEach((key) => {\n            const name = RequestQueryBuilder._options.paramNamesMap[key];\n            this.paramNames[key] = util_1.isString(name) ? name : name[0];\n        });\n    }\n    query(encode = true) {\n        if (this.queryObject[this.paramNames.search]) {\n            this.queryObject[this.paramNames.filter] = undefined;\n            this.queryObject[this.paramNames.or] = undefined;\n        }\n        this.queryString = qs_1.stringify(this.queryObject, { encode });\n        return this.queryString;\n    }\n    select(fields) {\n        if (util_1.isArrayFull(fields)) {\n            request_query_validator_1.validateFields(fields);\n            this.queryObject[this.paramNames.fields] = fields.join(this.options.delimStr);\n        }\n        return this;\n    }\n    search(s) {\n        if (!util_1.isNil(s) && util_1.isObject(s)) {\n            this.queryObject[this.paramNames.search] = JSON.stringify(s);\n        }\n        return this;\n    }\n    setFilter(f) {\n        this.setCondition(f, 'filter');\n        return this;\n    }\n    setOr(f) {\n        this.setCondition(f, 'or');\n        return this;\n    }\n    setJoin(j) {\n        if (!util_1.isNil(j)) {\n            const param = this.checkQueryObjectParam('join', []);\n            this.queryObject[param] = [\n                ...this.queryObject[param],\n                ...(Array.isArray(j) && !util_1.isString(j[0])\n                    ? j.map((o) => this.addJoin(o))\n                    : [this.addJoin(j)]),\n            ];\n        }\n        return this;\n    }\n    sortBy(s) {\n        if (!util_1.isNil(s)) {\n            const param = this.checkQueryObjectParam('sort', []);\n            this.queryObject[param] = [\n                ...this.queryObject[param],\n                ...(Array.isArray(s) && !util_1.isString(s[0])\n                    ? s.map((o) => this.addSortBy(o))\n                    : [this.addSortBy(s)]),\n            ];\n        }\n        return this;\n    }\n    setLimit(n) {\n        this.setNumeric(n, 'limit');\n        return this;\n    }\n    setOffset(n) {\n        this.setNumeric(n, 'offset');\n        return this;\n    }\n    setPage(n) {\n        this.setNumeric(n, 'page');\n        return this;\n    }\n    resetCache() {\n        this.setNumeric(0, 'cache');\n        return this;\n    }\n    cond(f, cond = 'search') {\n        const filter = Array.isArray(f) ? { field: f[0], operator: f[1], value: f[2] } : f;\n        request_query_validator_1.validateCondition(filter, cond);\n        const d = this.options.delim;\n        return (filter.field +\n            d +\n            filter.operator +\n            (util_1.hasValue(filter.value) ? d + filter.value : ''));\n    }\n    addJoin(j) {\n        const join = Array.isArray(j) ? { field: j[0], select: j[1] } : j;\n        request_query_validator_1.validateJoin(join);\n        const d = this.options.delim;\n        const ds = this.options.delimStr;\n        return join.field + (util_1.isArrayFull(join.select) ? d + join.select.join(ds) : '');\n    }\n    addSortBy(s) {\n        const sort = Array.isArray(s) ? { field: s[0], order: s[1] } : s;\n        request_query_validator_1.validateSort(sort);\n        const ds = this.options.delimStr;\n        return sort.field + ds + sort.order;\n    }\n    createFromParams(params) {\n        this.select(params.fields);\n        this.search(params.search);\n        this.setFilter(params.filter);\n        this.setOr(params.or);\n        this.setJoin(params.join);\n        this.setLimit(params.limit);\n        this.setOffset(params.offset);\n        this.setPage(params.page);\n        this.sortBy(params.sort);\n        if (params.resetCache) {\n            this.resetCache();\n        }\n        return this;\n    }\n    checkQueryObjectParam(cond, defaults) {\n        const param = this.paramNames[cond];\n        if (util_1.isNil(this.queryObject[param]) && !util_1.isUndefined(defaults)) {\n            this.queryObject[param] = defaults;\n        }\n        return param;\n    }\n    setCondition(f, cond) {\n        if (!util_1.isNil(f)) {\n            const param = this.checkQueryObjectParam(cond, []);\n            this.queryObject[param] = [\n                ...this.queryObject[param],\n                ...(Array.isArray(f) && !util_1.isString(f[0])\n                    ? f.map((o) => this.cond(o, cond))\n                    : [this.cond(f, cond)]),\n            ];\n        }\n    }\n    setNumeric(n, cond) {\n        if (!util_1.isNil(n)) {\n            request_query_validator_1.validateNumeric(n, cond);\n            this.queryObject[this.paramNames[cond]] = n;\n        }\n    }\n}\nexports.RequestQueryBuilder = RequestQueryBuilder;\nRequestQueryBuilder._options = {\n    delim: '||',\n    delimStr: ',',\n    paramNamesMap: {\n        fields: ['fields', 'select'],\n        search: 's',\n        filter: 'filter',\n        or: 'or',\n        join: 'join',\n        sort: 'sort',\n        limit: ['limit', 'per_page'],\n        offset: 'offset',\n        page: 'page',\n        cache: 'cache',\n    },\n};\n//# sourceMappingURL=request-query.builder.js.map"]},"metadata":{},"sourceType":"script"}