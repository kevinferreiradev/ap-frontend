{"ast":null,"code":"import { axiosInstance } from 'services/http';\nexport const login = ({\n  username,\n  password\n}) => {\n  localStorage.setItem('accessToken', 'token');\n  return Promise.resolve();\n  return axiosInstance.post('auth/signin', {\n    username,\n    password\n  }).then(response => {\n    localStorage.setItem('accessToken', response.data.accessToken);\n  });\n};\nexport default {\n  login,\n  logout: () => {\n    localStorage.removeItem('accessToken');\n    return Promise.resolve();\n  },\n  checkError: ({\n    response: {\n      status\n    }\n  }) => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('accessToken');\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  },\n  checkAuth: () => {\n    console.log('accessToken', localStorage.getItem('accessToken'));\n    return localStorage.getItem('accessToken') ? Promise.resolve() : Promise.reject();\n  },\n  getPermissions: () => Promise.resolve()\n};","map":{"version":3,"sources":["/Users/thiagoramalho/Documents/Thiago/Workspace/Firestorm/ap-admin/packages/admin/src/providers/authProvider.ts"],"names":["axiosInstance","login","username","password","localStorage","setItem","Promise","resolve","post","then","response","data","accessToken","logout","removeItem","checkError","status","reject","checkAuth","console","log","getItem","getPermissions"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AAiBA,OAAO,MAAMC,KAAK,GAAG,CAAC;AACpBC,EAAAA,QADoB;AAEpBC,EAAAA;AAFoB,CAAD,KAG0B;AAE7CC,EAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoC,OAApC;AACA,SAAOC,OAAO,CAACC,OAAR,EAAP;AAEA,SAAOP,aAAa,CACjBQ,IADI,CACgB,aADhB,EAC+B;AAAEN,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAD/B,EAEJM,IAFI,CAECC,QAAQ,IAAI;AAChBN,IAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCK,QAAQ,CAACC,IAAT,CAAcC,WAAlD;AACD,GAJI,CAAP;AAKD,CAbM;AAeP,eAAe;AACbX,EAAAA,KADa;AAEbY,EAAAA,MAAM,EAAE,MAAqB;AAC3BT,IAAAA,YAAY,CAACU,UAAb,CAAwB,aAAxB;AACA,WAAOR,OAAO,CAACC,OAAR,EAAP;AACD,GALY;AAMbQ,EAAAA,UAAU,EAAE,CAAC;AAAEL,IAAAA,QAAQ,EAAE;AAAEM,MAAAA;AAAF;AAAZ,GAAD,KAA4D;AACtE,QAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AACpCZ,MAAAA,YAAY,CAACU,UAAb,CAAwB,aAAxB;AACA,aAAOR,OAAO,CAACW,MAAR,EAAP;AACD;;AACD,WAAOX,OAAO,CAACC,OAAR,EAAP;AACD,GAZY;AAabW,EAAAA,SAAS,EAAE,MAAqB;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BhB,YAAY,CAACiB,OAAb,CAAqB,aAArB,CAA3B;AACA,WAAOjB,YAAY,CAACiB,OAAb,CAAqB,aAArB,IACHf,OAAO,CAACC,OAAR,EADG,GAEHD,OAAO,CAACW,MAAR,EAFJ;AAGD,GAlBY;AAmBbK,EAAAA,cAAc,EAAE,MAAqBhB,OAAO,CAACC,OAAR;AAnBxB,CAAf","sourcesContent":["import { axiosInstance } from 'services/http';\nexport interface AuthCredentialsInterface {\n  username: string;\n  password: string;\n  assertRoles?: string[];\n}\n\ninterface loginResponse {\n  accessToken: string;\n}\n\ninterface errorResponse {\n  response: {\n    status: number;\n  };\n}\n\nexport const login = ({\n  username,\n  password,\n}: AuthCredentialsInterface): Promise<void> => {\n  \n  localStorage.setItem('accessToken', 'token');\n  return Promise.resolve();\n  \n  return axiosInstance\n    .post<loginResponse>('auth/signin', { username, password })\n    .then(response => {\n      localStorage.setItem('accessToken', response.data.accessToken);\n    });\n};\n\nexport default {\n  login,\n  logout: (): Promise<void> => {\n    localStorage.removeItem('accessToken');\n    return Promise.resolve();\n  },\n  checkError: ({ response: { status } }: errorResponse): Promise<void> => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('accessToken');\n      return Promise.reject();\n    }\n    return Promise.resolve();\n  },\n  checkAuth: (): Promise<void> => {\n    console.log('accessToken', localStorage.getItem('accessToken'));\n    return localStorage.getItem('accessToken')\n      ? Promise.resolve()\n      : Promise.reject();\n  },\n  getPermissions: (): Promise<void> => Promise.resolve(),\n};\n"]},"metadata":{},"sourceType":"module"}