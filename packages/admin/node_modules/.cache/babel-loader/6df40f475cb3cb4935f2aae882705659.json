{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"@nestjsx/util\");\n\nconst exceptions_1 = require(\"./exceptions\");\n\nconst request_query_builder_1 = require(\"./request-query.builder\");\n\nconst request_query_validator_1 = require(\"./request-query.validator\");\n\nclass RequestQueryParser {\n  constructor() {\n    this.fields = [];\n    this.paramsFilter = [];\n    this.authPersist = undefined;\n    this.filter = [];\n    this.or = [];\n    this.join = [];\n    this.sort = [];\n  }\n\n  get _options() {\n    return request_query_builder_1.RequestQueryBuilder.getOptions();\n  }\n\n  static create() {\n    return new RequestQueryParser();\n  }\n\n  getParsed() {\n    return {\n      fields: this.fields,\n      paramsFilter: this.paramsFilter,\n      authPersist: this.authPersist,\n      search: this.search,\n      filter: this.filter,\n      or: this.or,\n      join: this.join,\n      sort: this.sort,\n      limit: this.limit,\n      offset: this.offset,\n      page: this.page,\n      cache: this.cache\n    };\n  }\n\n  parseQuery(query) {\n    if (util_1.isObject(query)) {\n      const paramNames = util_1.objKeys(query);\n\n      if (util_1.hasLength(paramNames)) {\n        this._query = query;\n        this._paramNames = paramNames;\n\n        let searchData = this._query[this.getParamNames('search')[0]];\n\n        this.search = this.parseSearchQueryParam(searchData);\n\n        if (util_1.isNil(this.search)) {\n          this.filter = this.parseQueryParam('filter', this.conditionParser.bind(this, 'filter'));\n          this.or = this.parseQueryParam('or', this.conditionParser.bind(this, 'or'));\n        }\n\n        this.fields = this.parseQueryParam('fields', this.fieldsParser.bind(this))[0] || [];\n        this.join = this.parseQueryParam('join', this.joinParser.bind(this));\n        this.sort = this.parseQueryParam('sort', this.sortParser.bind(this));\n        this.limit = this.parseQueryParam('limit', this.numericParser.bind(this, 'limit'))[0];\n        this.offset = this.parseQueryParam('offset', this.numericParser.bind(this, 'offset'))[0];\n        this.page = this.parseQueryParam('page', this.numericParser.bind(this, 'page'))[0];\n        this.cache = this.parseQueryParam('cache', this.numericParser.bind(this, 'cache'))[0];\n      }\n    }\n\n    return this;\n  }\n\n  parseParams(params, options) {\n    if (util_1.isObject(params)) {\n      const paramNames = util_1.objKeys(params);\n\n      if (util_1.hasLength(paramNames)) {\n        this._params = params;\n        this._paramsOptions = options;\n        this.paramsFilter = paramNames.map(name => this.paramParser(name)).filter(filter => filter);\n      }\n    }\n\n    return this;\n  }\n\n  setAuthPersist(persist = {}) {\n    this.authPersist = persist || {};\n  }\n\n  convertFilterToSearch(filter) {\n    const isEmptyValue = {\n      isnull: true,\n      notnull: true\n    };\n    return filter ? {\n      [filter.field]: {\n        [filter.operator]: isEmptyValue[filter.operator] ? isEmptyValue[filter.operator] : filter.value\n      }\n    } : {};\n  }\n\n  getParamNames(type) {\n    return this._paramNames.filter(p => {\n      const name = this._options.paramNamesMap[type];\n      return util_1.isString(name) ? name === p : name.some(m => m === p);\n    });\n  }\n\n  getParamValues(value, parser) {\n    if (util_1.isStringFull(value)) {\n      return [parser.call(this, value)];\n    }\n\n    if (util_1.isArrayFull(value)) {\n      return value.map(val => parser(val));\n    }\n\n    return [];\n  }\n\n  parseQueryParam(type, parser) {\n    const param = this.getParamNames(type);\n\n    if (util_1.isArrayFull(param)) {\n      return param.reduce((a, name) => [...a, ...this.getParamValues(this._query[name], parser)], []);\n    }\n\n    return [];\n  }\n\n  parseValue(val) {\n    try {\n      const parsed = JSON.parse(val);\n\n      if (!util_1.isDate(parsed) && util_1.isObject(parsed)) {\n        return val;\n      } else if (typeof parsed === 'number' && parsed.toLocaleString('fullwide', {\n        useGrouping: false\n      }) !== val) {\n        return val;\n      }\n\n      return parsed;\n    } catch (ignored) {\n      if (util_1.isDateString(val)) {\n        return new Date(val);\n      }\n\n      return val;\n    }\n  }\n\n  parseValues(vals) {\n    if (util_1.isArrayFull(vals)) {\n      return vals.map(v => this.parseValue(v));\n    } else {\n      return this.parseValue(vals);\n    }\n  }\n\n  fieldsParser(data) {\n    return data.split(this._options.delimStr);\n  }\n\n  parseSearchQueryParam(d) {\n    try {\n      if (util_1.isNil(d)) {\n        return undefined;\n      }\n\n      const data = JSON.parse(d);\n\n      if (!util_1.isObject(data)) {\n        throw new Error();\n      }\n\n      return data;\n    } catch (_) {\n      throw new exceptions_1.RequestQueryException('Invalid search param. JSON expected');\n    }\n  }\n\n  conditionParser(cond, data) {\n    const isArrayValue = ['in', 'notin', 'between', '$in', '$notin', '$between', '$inL', '$notinL'];\n    const isEmptyValue = ['isnull', 'notnull', '$isnull', '$notnull'];\n    const param = data.split(this._options.delim);\n    const field = param[0];\n    const operator = param[1];\n    let value = param[2] || '';\n\n    if (isArrayValue.some(name => name === operator)) {\n      value = value.split(this._options.delimStr);\n    }\n\n    value = this.parseValues(value);\n\n    if (!isEmptyValue.some(name => name === operator) && !util_1.hasValue(value)) {\n      throw new exceptions_1.RequestQueryException(`Invalid ${cond} value`);\n    }\n\n    const condition = {\n      field,\n      operator,\n      value\n    };\n    request_query_validator_1.validateCondition(condition, cond);\n    return condition;\n  }\n\n  joinParser(data) {\n    const param = data.split(this._options.delim);\n    const join = {\n      field: param[0],\n      select: util_1.isStringFull(param[1]) ? param[1].split(this._options.delimStr) : undefined\n    };\n    request_query_validator_1.validateJoin(join);\n    return join;\n  }\n\n  sortParser(data) {\n    const param = data.split(this._options.delimStr);\n    const sort = {\n      field: param[0],\n      order: param[1]\n    };\n    request_query_validator_1.validateSort(sort);\n    return sort;\n  }\n\n  numericParser(num, data) {\n    const val = this.parseValue(data);\n    request_query_validator_1.validateNumeric(val, num);\n    return val;\n  }\n\n  paramParser(name) {\n    request_query_validator_1.validateParamOption(this._paramsOptions, name);\n    const option = this._paramsOptions[name];\n\n    if (option.disabled) {\n      return undefined;\n    }\n\n    let value = this._params[name];\n\n    switch (option.type) {\n      case 'number':\n        value = this.parseValue(value);\n        request_query_validator_1.validateNumeric(value, `param ${name}`);\n        break;\n\n      case 'uuid':\n        request_query_validator_1.validateUUID(value, name);\n        break;\n\n      default:\n        break;\n    }\n\n    return {\n      field: option.field,\n      operator: '$eq',\n      value\n    };\n  }\n\n}\n\nexports.RequestQueryParser = RequestQueryParser;","map":{"version":3,"sources":["../src/request-query.parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"@nestjsx/util\");\nconst exceptions_1 = require(\"./exceptions\");\nconst request_query_builder_1 = require(\"./request-query.builder\");\nconst request_query_validator_1 = require(\"./request-query.validator\");\nclass RequestQueryParser {\n    constructor() {\n        this.fields = [];\n        this.paramsFilter = [];\n        this.authPersist = undefined;\n        this.filter = [];\n        this.or = [];\n        this.join = [];\n        this.sort = [];\n    }\n    get _options() {\n        return request_query_builder_1.RequestQueryBuilder.getOptions();\n    }\n    static create() {\n        return new RequestQueryParser();\n    }\n    getParsed() {\n        return {\n            fields: this.fields,\n            paramsFilter: this.paramsFilter,\n            authPersist: this.authPersist,\n            search: this.search,\n            filter: this.filter,\n            or: this.or,\n            join: this.join,\n            sort: this.sort,\n            limit: this.limit,\n            offset: this.offset,\n            page: this.page,\n            cache: this.cache,\n        };\n    }\n    parseQuery(query) {\n        if (util_1.isObject(query)) {\n            const paramNames = util_1.objKeys(query);\n            if (util_1.hasLength(paramNames)) {\n                this._query = query;\n                this._paramNames = paramNames;\n                let searchData = this._query[this.getParamNames('search')[0]];\n                this.search = this.parseSearchQueryParam(searchData);\n                if (util_1.isNil(this.search)) {\n                    this.filter = this.parseQueryParam('filter', this.conditionParser.bind(this, 'filter'));\n                    this.or = this.parseQueryParam('or', this.conditionParser.bind(this, 'or'));\n                }\n                this.fields =\n                    this.parseQueryParam('fields', this.fieldsParser.bind(this))[0] || [];\n                this.join = this.parseQueryParam('join', this.joinParser.bind(this));\n                this.sort = this.parseQueryParam('sort', this.sortParser.bind(this));\n                this.limit = this.parseQueryParam('limit', this.numericParser.bind(this, 'limit'))[0];\n                this.offset = this.parseQueryParam('offset', this.numericParser.bind(this, 'offset'))[0];\n                this.page = this.parseQueryParam('page', this.numericParser.bind(this, 'page'))[0];\n                this.cache = this.parseQueryParam('cache', this.numericParser.bind(this, 'cache'))[0];\n            }\n        }\n        return this;\n    }\n    parseParams(params, options) {\n        if (util_1.isObject(params)) {\n            const paramNames = util_1.objKeys(params);\n            if (util_1.hasLength(paramNames)) {\n                this._params = params;\n                this._paramsOptions = options;\n                this.paramsFilter = paramNames\n                    .map((name) => this.paramParser(name))\n                    .filter((filter) => filter);\n            }\n        }\n        return this;\n    }\n    setAuthPersist(persist = {}) {\n        this.authPersist = persist || {};\n    }\n    convertFilterToSearch(filter) {\n        const isEmptyValue = {\n            isnull: true,\n            notnull: true,\n        };\n        return filter\n            ? {\n                [filter.field]: {\n                    [filter.operator]: isEmptyValue[filter.operator]\n                        ? isEmptyValue[filter.operator]\n                        : filter.value,\n                },\n            }\n            : {};\n    }\n    getParamNames(type) {\n        return this._paramNames.filter((p) => {\n            const name = this._options.paramNamesMap[type];\n            return util_1.isString(name) ? name === p : name.some((m) => m === p);\n        });\n    }\n    getParamValues(value, parser) {\n        if (util_1.isStringFull(value)) {\n            return [parser.call(this, value)];\n        }\n        if (util_1.isArrayFull(value)) {\n            return value.map((val) => parser(val));\n        }\n        return [];\n    }\n    parseQueryParam(type, parser) {\n        const param = this.getParamNames(type);\n        if (util_1.isArrayFull(param)) {\n            return param.reduce((a, name) => [...a, ...this.getParamValues(this._query[name], parser)], []);\n        }\n        return [];\n    }\n    parseValue(val) {\n        try {\n            const parsed = JSON.parse(val);\n            if (!util_1.isDate(parsed) && util_1.isObject(parsed)) {\n                return val;\n            }\n            else if (typeof parsed === 'number' &&\n                parsed.toLocaleString('fullwide', { useGrouping: false }) !== val) {\n                return val;\n            }\n            return parsed;\n        }\n        catch (ignored) {\n            if (util_1.isDateString(val)) {\n                return new Date(val);\n            }\n            return val;\n        }\n    }\n    parseValues(vals) {\n        if (util_1.isArrayFull(vals)) {\n            return vals.map((v) => this.parseValue(v));\n        }\n        else {\n            return this.parseValue(vals);\n        }\n    }\n    fieldsParser(data) {\n        return data.split(this._options.delimStr);\n    }\n    parseSearchQueryParam(d) {\n        try {\n            if (util_1.isNil(d)) {\n                return undefined;\n            }\n            const data = JSON.parse(d);\n            if (!util_1.isObject(data)) {\n                throw new Error();\n            }\n            return data;\n        }\n        catch (_) {\n            throw new exceptions_1.RequestQueryException('Invalid search param. JSON expected');\n        }\n    }\n    conditionParser(cond, data) {\n        const isArrayValue = [\n            'in',\n            'notin',\n            'between',\n            '$in',\n            '$notin',\n            '$between',\n            '$inL',\n            '$notinL',\n        ];\n        const isEmptyValue = ['isnull', 'notnull', '$isnull', '$notnull'];\n        const param = data.split(this._options.delim);\n        const field = param[0];\n        const operator = param[1];\n        let value = param[2] || '';\n        if (isArrayValue.some((name) => name === operator)) {\n            value = value.split(this._options.delimStr);\n        }\n        value = this.parseValues(value);\n        if (!isEmptyValue.some((name) => name === operator) && !util_1.hasValue(value)) {\n            throw new exceptions_1.RequestQueryException(`Invalid ${cond} value`);\n        }\n        const condition = { field, operator, value };\n        request_query_validator_1.validateCondition(condition, cond);\n        return condition;\n    }\n    joinParser(data) {\n        const param = data.split(this._options.delim);\n        const join = {\n            field: param[0],\n            select: util_1.isStringFull(param[1]) ? param[1].split(this._options.delimStr) : undefined,\n        };\n        request_query_validator_1.validateJoin(join);\n        return join;\n    }\n    sortParser(data) {\n        const param = data.split(this._options.delimStr);\n        const sort = {\n            field: param[0],\n            order: param[1],\n        };\n        request_query_validator_1.validateSort(sort);\n        return sort;\n    }\n    numericParser(num, data) {\n        const val = this.parseValue(data);\n        request_query_validator_1.validateNumeric(val, num);\n        return val;\n    }\n    paramParser(name) {\n        request_query_validator_1.validateParamOption(this._paramsOptions, name);\n        const option = this._paramsOptions[name];\n        if (option.disabled) {\n            return undefined;\n        }\n        let value = this._params[name];\n        switch (option.type) {\n            case 'number':\n                value = this.parseValue(value);\n                request_query_validator_1.validateNumeric(value, `param ${name}`);\n                break;\n            case 'uuid':\n                request_query_validator_1.validateUUID(value, name);\n                break;\n            default:\n                break;\n        }\n        return { field: option.field, operator: '$eq', value };\n    }\n}\nexports.RequestQueryParser = RequestQueryParser;\n//# sourceMappingURL=request-query.parser.js.map"]},"metadata":{},"sourceType":"script"}